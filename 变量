python在类中定义的变量分为类属性和对象属性，例子如下
class Example:
  a = 100
  def __init__(self):
    self.b = 200

上面的代码中，a就是类属性，b就是对象属性
类属性与对象属性的一大区别就是调用的方法不同
类属性可以通过类名和对象名调用，对象属性只可以通过对象名调用
在修改这两种属性时，python解释器的过程如下
#begin
class Test:
    a = 1000
    def __init__(self):
        self.b = 100
    
t1 = Test()
t2 = Test()
print(id(t1.a))  #2497126179728
print(id(t2.a))  #2497126179728
print(id(Test.a)) #2497126179728

t1.a += 100  
Test.a += 100 

print(t1.a) # 1100
print(Test.a) # 1100

print(id(t1.a)) # 2497126182608
print(id(t2.a)) # 2497126181136
print(id(Test.a)) # 2497126181136
#end
可以看到，第一次打印三个类属性的值是一样的，而之后t1.a的地址经过修改发生了改变，而t2.a的地址与Test.a的地址相同，在这里三种方法引用的都是一个变量
这是因为python解释器在通过对象名修改类属性的时候会先在对象中查找该变量，如果没有发现，就在类中查找，找到的话就在对象中重新创造一个变量，下次调用时会调用对象中的变量，所以地址发生了改变
